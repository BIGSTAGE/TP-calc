// Загружаем библиотеку SheetJS
const script = document.createElement('script');
script.src = 'https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.17.0/xlsx.full.min.js';
document.head.appendChild(script);

// Функция для сохранения выбранных столбцов из нескольких страниц в Excel
async function saveSelectedColumnsFromLimitedPagesAsExcel(maxPages) {
    // Массив для хранения данных со всех страниц
    let allData = [];
    let hasMorePages = true; // Переменная для контроля наличия страниц
    let currentPage = 0; // Переменная для отслеживания текущей страницы

    // Индексы нужных столбцов
    const coinIndex = 1; // Coin (второй столбец)
    const signalPriceIndex = 3; // Signal Price (четвертый столбец)
    const additionalIndex1 = 5; // (шестой столбец)
    const additionalIndex2 = 6; // (седьмой столбец)

    while (hasMorePages && currentPage < maxPages) {
        // Находим таблицу
        let table = document.querySelector('table'); 
        if (!table) {
            console.error('Таблица не найдена на странице.');
            break; // Если таблица не найдена, выходим из цикла
        }

        let ws_data = [];
        
        // Извлекаем строки из таблицы
        let rows = Array.from(table.querySelectorAll('tr'));
        rows.forEach(tr => {
            let cells = Array.from(tr.querySelectorAll('td'));
            if (cells.length > 0) { // Проверяем, что в строке есть данные
                // Сохраняем данные только из нужных столбцов
                let coin = cells[coinIndex] ? cells[coinIndex].innerText.trim() : ""; // Coin
                let signalPrice = cells[signalPriceIndex] ? cells[signalPriceIndex].innerText.trim() : ""; // Signal Price
                let additionalData1 = cells[additionalIndex1] ? cells[additionalIndex1].innerText.trim() : ""; // 6-й столбец
                let additionalData2 = cells[additionalIndex2] ? cells[additionalIndex2].innerText.trim() : ""; // 7-й столбец
                
                // Добавляем строку в массив данных
                ws_data.push([coin, signalPrice, additionalData1, additionalData2]);
            }
        });

        console.log(`Собрано ${ws_data.length} записей с текущей страницы.`); // Сообщение об успешном сборе данных

        // Добавляем данные в общий массив
        allData = allData.concat(ws_data);

        // Проверка наличия следующей страницы
        let nextPageLink = document.querySelector('.page-link[ng-switch-when="next"]');
        if (nextPageLink && nextPageLink.href) {
            // Переход на следующую страницу
            nextPageLink.click();
            currentPage++; // Увеличиваем счетчик текущей страницы
            // Ждем, пока страница загрузится
            await new Promise(resolve => setTimeout(resolve, 2000)); // Задержка для загрузки данных
        } else {
            hasMorePages = false; // Если следующей страницы нет, выходим из цикла
        }
    }

    if (allData.length > 0) { // Проверяем, есть ли собранные данные
        // Создаем новый рабочий лист для Excel
        let wb = XLSX.utils.book_new();
        let ws = XLSX.utils.aoa_to_sheet(allData); // Добавляем данные

        // Добавляем рабочий лист в книгу
        XLSX.utils.book_append_sheet(wb, ws, 'SelectedData');

        // Сохраняем файл
        XLSX.writeFile(wb, 'selected_table_limited_pages.xlsx');
        console.log('Данные успешно сохранены в файл: selected_table_limited_pages.xlsx');
    } else {
        console.warn('Нет данных для сохранения.');
    }
}

// Устанавливаем максимальное количество страниц для обработки
const maxPages = 4; // Измените это значение на нужное вам
saveSelectedColumnsFromLimitedPagesAsExcel(maxPages);
